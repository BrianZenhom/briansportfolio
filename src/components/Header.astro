---
import LinkedLogo from "../components/IconLinked.astro";
import IconGit from "../components/IconGit.astro";
import LogoBz from "../components/LogoBz.astro";
---

<header
  id="landing-header"
  class="noise-container h-header py-2 bg-bg-color px-24 flex items-center fixed top-0 w-full justify-between z-50 text-white max-sm:flex-col max-sm:items-start max-sm:px-0 max-sm:py-0 max-sm:w-full"
>
  <div class="noise"></div>
  <div class="flex p-2 flex-grow basis-0 max-sm:p-0">
    <li class="pl-5 pr-5 h-auto">
      <a class="hover:scale-110 p-2 transition-all ease-in-out" href="#intro">
        <LogoBz />
      </a>
    </li>
  </div>
  <nav class="max-sm:flex-col max-sm:items-start max-sm:w-full">
    <a
      href="#"
      class="absolute top-4 right-8 flex-col justify-between hidden w-[30px] h-[21px] rounded-full max-sm:flex"
    >
      <span
        ><label class="hamburger">
          <input id="toggle-button" type="checkbox" />
          <svg viewBox="0 0 32 32">
            <path
              class="line line-top-bottom"
              d="M27 10 13 10C10.8 10 9 8.2 9 6 9 3.5 10.8 2 13 2 15.2 2 17 3.8 17 6L17 26C17 28.2 18.8 30 21 30 23.2 30 25 28.2 25 26 25 23.8 23.2 22 21 22L7 22"
            ></path>
            <path class="line" d="M7 16 27 16"></path>
          </svg>
        </label></span
      >
    </a>

    <ul
      id="navbar-links"
      class="flex text-sm [&>li>a]:text-white [&>li>a]:font-medium [&>li>a]:inline-block [&>li>a]:px-4 [&>li>a]:py-2 max-sm:flex-col max-sm:items-center max-sm:w-full max-sm:gap-5 max-sm:py-10 max-sm:hidden transition-opacity ease-in-out max-sm:bg-bg-color"
    >
      <li class="max-sm:z-20"><a href="#projects">Projects</a></li>
      <li class="max-sm:z-20"><a href="#aboutme">About</a></li>
      <li class="max-sm:z-20"><a href="#experience">Experience</a></li>
      <li class="max-sm:z-20"><a href="#">Contact</a></li>
    </ul>
  </nav>

  <nav class="flex flex-grow justify-end basis-0 w">
    <ul
      class="flex text-sm [&>li>a]:text-white [&>li>a]:font-medium [&>li>a]:inline-block [&>li>a]:px-4 [&>li>a]:py-2 max-sm:hidden"
    >
      <li>
        <a target="_blank" href="https://www.linkedin.com/in/brianzenhom/"
          ><LinkedLogo /></a
        >
      </li>
      <li>
        <a target="_blank" href="https://github.com/BrianZenhom"><IconGit /></a>
      </li>
    </ul>
  </nav>

  <div
    class={`absolute bg-gradient-to-r from-mainColor to-blue-300 blur-xl backdrop-blur-lg rounded-md
  translate-x-[var(--left)] translate-y-[var(--top)]
  top-0 left-0
  w-[var(--width)] h-[var(--height)]
  transition-all duration-300
  ease-in-out opacity-0 -z-10 max-sm:hidden
  `}
    id="menu-backdrop"
  >
  </div>
</header>
<script>
  const listItem = document.querySelectorAll("#landing-header li");
  const menuBackDrop = document.querySelector("#menu-backdrop") as HTMLElement;

  listItem.forEach((item) => {
    item.addEventListener("mouseenter", () => {
      const { left, top, width, height } = item.getBoundingClientRect();

      menuBackDrop.style.setProperty("--left", `${left}px`);
      menuBackDrop.style.setProperty("--top", `${top}px`);
      menuBackDrop.style.setProperty("--width", `${width}px`);
      menuBackDrop.style.setProperty("--height", `${height}px`);

      menuBackDrop.style.opacity = "1";
      menuBackDrop.style.visibility = "visible";
    });

    item.addEventListener("mouseleave", () => {
      menuBackDrop.style.opacity = "0";
      menuBackDrop.style.visibility = "hidden";
    });
  });

  const toggleButton = document.getElementById("toggle-button");
  const navbarLinks = document.getElementById("navbar-links");

  toggleButton.addEventListener("click", () => {
    navbarLinks.classList.toggle("max-sm:hidden");
  });
</script>

<style>
  html {
    scroll-behavior: smooth;
  }
  *,
  :before,
  :after {
    text-decoration: none;
    list-style: none;
    box-sizing: border-box;
    border-width: 0;
    border-style: solid;
    border-color: #e5e7eb;
    scroll-behavior: smooth;
  }
  .noise-container {
    isolation: isolate;
    background-color: #17191e;
  }
  main::before {
    position: absolute;
    aspect-ratio: 1 / 1;
    width: 100%;
    background-repeat: repeat;
    content: "";
    background-size: 20px 20px;
    background-image: linear-gradient(
        to right,
        rgb(35 38 45) 1px,
        transparent 1px
      ),
      linear-gradient(to bottom, rgb(35 38 45) 1px, transparent 1px);
    -webkit-mask-image: linear-gradient(to bottom, white, transparent);
    mask-image: linear-gradient(to bottom, white, transparent);
    z-index: -1;
  }
  .hero::before {
    position: absolute;
    content: "";
    height: 50vw;
    width: 100vw;
    top: 50%;
    translate: 0 -30%;
    left: -60vw;
    background: url(/noise.webp) repeat,
      linear-gradient(83.21deg, #3245ff 0%, #bc52ee 100%);
    background-blend-mode: overlay;
    -webkit-mask-image: radial-gradient(rgba(0, 0, 0, 0.4), transparent 65%);
    mask-image: radial-gradient(rgba(0, 0, 0, 0.4), transparent 65%);
    z-index: -1;
  }
  .hero::after {
    position: absolute;
    content: "";
    height: 50vw;
    width: 100vw;
    top: 50%;
    translate: 0 -30%;
    right: -60vw;
    background: url(/noise.webp) repeat,
      linear-gradient(247.23deg, #4af2c8 0%, #2f4cb3 100%);
    background-blend-mode: overlay;
    -webkit-mask-image: radial-gradient(rgba(0, 0, 0, 0.5), transparent 65%);
    mask-image: radial-gradient(rgba(0, 0, 0, 0.5), transparent 65%);
    z-index: -1;
  }
  .noise {
    z-index: -20;
    position: absolute;
    inset: 0;
    background-image: url(/noise.webp);
    opacity: 0.4;
    mix-blend-mode: overlay;
    pointer-events: none;
  }
  .hamburger {
    cursor: pointer;
  }

  .hamburger input {
    display: none;
  }

  .hamburger svg {
    /* The size of the SVG defines the overall size */
    height: 3em;
    /* Define the transition for transforming the SVG */
    transition: transform 600ms cubic-bezier(0.4, 0, 0.2, 1);
  }

  .line {
    fill: none;
    stroke: white;
    stroke-linecap: round;
    stroke-linejoin: round;
    stroke-width: 3;
    /* Define the transition for transforming the Stroke */
    transition: stroke-dasharray 600ms cubic-bezier(0.4, 0, 0.2, 1),
      stroke-dashoffset 600ms cubic-bezier(0.4, 0, 0.2, 1);
  }

  .line-top-bottom {
    stroke-dasharray: 12 63;
  }

  .hamburger input:checked + svg {
    transform: rotate(-45deg);
  }

  .hamburger input:checked + svg .line-top-bottom {
    stroke-dasharray: 20 300;
    stroke-dashoffset: -32.42;
  }
  /* .toggle-button {
    position: absolute;
    top: 1.7rem;
    right: 2rem;
    display: none
    flex-direction: column;
    justify-content: space-between;
    width: 30px;
    height: 21px;
  }
  .bar {
    height: 3px;
    width: 100%;
    background-color: #fff;
    border-radius: 10px;
  } */
</style>
